name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 또는 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: iop04226/my-docker-first
  PORT: 8080

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 push 하는 과정
  build-docker-image:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    # 1. Java 17 설정
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. SpringBoot 애플리케이션 Build
    - name: Set up Gradle
      uses: gradle/actions/setup-gradle@v4.0.0

    # 2-1 실행 권한 설정
    - name: Grant execute permission
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew clean bootJar
    
    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-docker-first .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-docker-first

    - name: Build with Gradle Wrapper
      run: ./gradlew build

  deploy:
    needs: build-docker-image

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Build & Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:$GITHUB_SHA .
          docker push $DOCKER_IMAGE:$GITHUB_SHA

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Docker 이미지 최신화
            docker pull iop04226/my-docker-first:$GITHUB_SHA

            # 기존 컨테이너 정리
            docker stop test_docker || true
            docker rm test_docker || true

            # 신규 컨테이너 실행
            docker run -d --name test_docker -p 8080:8080 iop04226/my-docker-first:$GITHUB_SHA

            # 컨테이너 상태 확인
            docker ps | grep test_docker
            # 중단된 컨테이너 정리
            docker system prune -f
    

